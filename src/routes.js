// Auto-generated by BabelAPI, do not modify.
var routes = {};

/**
 * Copy a file or folder to a different location in the user's Dropbox. If the
 * source path is a folder all its contents will be copied.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.from_path - Path in the user's Dropbox to be copied or
 * moved.
 * @arg {String} arg.to_path - Path in the user's Dropbox that is the
 * destination.
 * @returns {Object}
 */
routes.filesCopy = function (arg) {
    return self.request("files/copy", arg, null);
}

/**
 * Create a folder at a given path.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - Path in the user's Dropbox to create.
 * @returns {Object}
 */
routes.filesCreateFolder = function (arg) {
    return self.request("files/create_folder", arg, null);
}

/**
 * Delete the file or folder at a given path. If the path is a folder, all its
 * contents will be deleted too. A successful response indicates that the file
 * or folder was deleted. The returned metadata will be the corresponding
 * FileMetadata or FolderMetadata for the item at time of deletion, and not a
 * DeletedMetadata object.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - Path in the user's Dropbox to delete.
 * @returns {Object}
 */
routes.filesDelete = function (arg) {
    return self.request("files/delete", arg, null);
}

/**
 * Download a file from a user's Dropbox.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path of the file to download.
 * @arg {String|null} arg.rev - Deprecated. Please specify revision in path
 * instead
 * @returns {Object}
 */
routes.filesDownload = function (arg) {
    return self.request("files/download", arg, "download");
}

/**
 * Returns the metadata for a file or folder. Note: Metadata for the root folder
 * is unsupported.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path of a file or folder on Dropbox.
 * @arg {Boolean} arg.include_media_info - If true, FileMetadata.media_info is
 * set for photo and video.
 * @returns {Object}
 */
routes.filesGetMetadata = function (arg) {
    return self.request("files/get_metadata", arg, null);
}

/**
 * Get a preview for a file. Currently previews are only generated for the files
 * with  the following extensions: .doc, .docx, .docm, .ppt, .pps, .ppsx, .ppsm,
 * .pptx, .pptm,  .xls, .xlsx, .xlsm, .rtf
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path of the file to preview.
 * @arg {String|null} arg.rev - Deprecated. Please specify revision in path
 * instead
 * @returns {Object}
 */
routes.filesGetPreview = function (arg) {
    return self.request("files/get_preview", arg, "download");
}

/**
 * Get a thumbnail for an image. This method currently supports files with the
 * following file extensions: jpg, jpeg, png, tiff, tif, gif and bmp. Photos
 * that are larger than 20MB in size won't be converted to a thumbnail.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the image file you want to thumbnail.
 * @arg {Object} arg.format - The format for the thumbnail image, jpeg (default)
 * or png. For  images that are photos, jpeg should be preferred, while png is
 * better for screenshots and digital arts.
 * @arg {Object} arg.size - The size for the thumbnail image.
 * @returns {Object}
 */
routes.filesGetThumbnail = function (arg) {
    return self.request("files/get_thumbnail", arg, "download");
}

/**
 * Returns the contents of a folder.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the folder you want to see the contents
 * of.
 * @arg {Boolean} arg.recursive - If true, the list folder operation will be
 * applied recursively to all subfolders and the response will contain contents
 * of all subfolders.
 * @arg {Boolean} arg.include_media_info - If true, FileMetadata.media_info is
 * set for photo and video.
 * @arg {Boolean} arg.include_deleted - If true, the results will include
 * entries for files and folders that used to exist but were deleted.
 * @returns {Object}
 */
routes.filesListFolder = function (arg) {
    return self.request("files/list_folder", arg, null);
}

/**
 * Once a cursor has been retrieved from list_folder, use this to paginate
 * through all files and retrieve updates to the folder.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - The cursor returned by your last call to
 * list_folder or list_folder/continue.
 * @returns {Object}
 */
routes.filesListFolderContinue = function (arg) {
    return self.request("files/list_folder/continue", arg, null);
}

/**
 * A way to quickly get a cursor for the folder's state. Unlike list_folder,
 * list_folder/get_latest_cursor doesn't return any entries. This endpoint is
 * for app which only needs to know about new files and modifications and
 * doesn't need to know about files that already exist in Dropbox.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the folder you want to see the contents
 * of.
 * @arg {Boolean} arg.recursive - If true, the list folder operation will be
 * applied recursively to all subfolders and the response will contain contents
 * of all subfolders.
 * @arg {Boolean} arg.include_media_info - If true, FileMetadata.media_info is
 * set for photo and video.
 * @arg {Boolean} arg.include_deleted - If true, the results will include
 * entries for files and folders that used to exist but were deleted.
 * @returns {Object}
 */
routes.filesListFolderGetLatestCursor = function (arg) {
    return self.request("files/list_folder/get_latest_cursor", arg, null);
}

/**
 * A longpoll endpoint to wait for changes on an account. In conjunction with
 * list_folder, this call gives you a low-latency way to monitor an account for
 * file changes. The connection will block until there are changes available or
 * a timeout occurs. This endpoint is useful mostly for client-side apps. If
 * you're looking for server-side notifications, check out our webhooks
 * documentation https://www.dropbox.com/developers/reference/webhooks.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - A cursor as returned by list_folder or
 * list_folder/continue. Cursors retrieved by setting
 * ListFolderArg.include_media_info to true are not supported.
 * @arg {Number} arg.timeout - A timeout in seconds. The request will block for
 * at most this length of time, plus up to 90 seconds of random jitter added to
 * avoid the thundering herd problem. Care should be taken when using this
 * parameter, as some network infrastructure does not support long timeouts.
 * @returns {Object}
 */
routes.filesListFolderLongpoll = function (arg) {
    return self.request("files/list_folder/longpoll", arg, null);
}

/**
 * Return revisions of a file
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the file you want to see the revisions
 * of.
 * @arg {Number} arg.limit - The maximum number of revision entries returned.
 * @returns {Object}
 */
routes.filesListRevisions = function (arg) {
    return self.request("files/list_revisions", arg, null);
}

/**
 * Move a file or folder to a different location in the user's Dropbox. If the
 * source path is a folder all its contents will be moved.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.from_path - Path in the user's Dropbox to be copied or
 * moved.
 * @arg {String} arg.to_path - Path in the user's Dropbox that is the
 * destination.
 * @returns {Object}
 */
routes.filesMove = function (arg) {
    return self.request("files/move", arg, null);
}

/**
 * Permanently delete the file or folder at a given path (see
 * https://www.dropbox.com/en/help/40). Note: This endpoint is only available
 * for Dropbox Business apps.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - Path in the user's Dropbox to delete.
 * @returns {null}
 */
routes.filesPermanentlyDelete = function (arg) {
    return self.request("files/permanently_delete", arg, null);
}

/**
 * Restore a file to a specific revision
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the file you want to restore.
 * @arg {String} arg.rev - The revision to restore for the file.
 * @returns {Object}
 */
routes.filesRestore = function (arg) {
    return self.request("files/restore", arg, null);
}

/**
 * Searches for files and folders.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path in the user's Dropbox to search. Should
 * probably be a folder.
 * @arg {String} arg.query - The string to search for. The search string is
 * split on spaces into multiple tokens. For file name searching, the last token
 * is used for prefix matching (i.e. "bat c" matches "bat cave" but not "batman
 * car").
 * @arg {Number} arg.start - The starting index within the search results (used
 * for paging).
 * @arg {Number} arg.max_results - The maximum number of search results to
 * return.
 * @arg {Object} arg.mode - The search mode (filename, filename_and_content, or
 * deleted_filename). Note that searching file content is only available for
 * Dropbox Business accounts.
 * @returns {Object}
 */
routes.filesSearch = function (arg) {
    return self.request("files/search", arg, null);
}

/**
 * Create a new file with the contents provided in the request. Do not use this
 * to upload a file larger than 150 MB. Instead, create an upload session with
 * upload_session/start.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - Path in the user's Dropbox to save the file.
 * @arg {Object} arg.mode - Selects what to do if the file already exists.
 * @arg {Boolean} arg.autorename - If there's a conflict, as determined by mode,
 * have the Dropbox server try to autorename the file to avoid conflict.
 * @arg {Object|null} arg.client_modified - The value to store as the
 * client_modified timestamp. Dropbox automatically records the time at which
 * the file was written to the Dropbox servers. It can also record an additional
 * timestamp, provided by Dropbox desktop clients, mobile clients, and API apps
 * of when the file was actually created or modified.
 * @arg {Boolean} arg.mute - Normally, users are made aware of any file
 * modifications in their Dropbox account via notifications in the client
 * software. If true, this tells the clients that this modification shouldn't
 * result in a user notification.
 * @returns {Object}
 */
routes.filesUpload = function (arg) {
    return self.request("files/upload", arg, "upload");
}

/**
 * Append more data to an upload session. A single request should not upload
 * more than 150 MB of file contents.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.session_id - The upload session ID (returned by
 * upload_session/start).
 * @arg {Number} arg.offset - The amount of data that has been uploaded so far.
 * We use this to make sure upload data isn't lost or duplicated in the event of
 * a network error.
 * @returns {null}
 */
routes.filesUploadSessionAppend = function (arg) {
    return self.request("files/upload_session/append", arg, "upload");
}

/**
 * Finish an upload session and save the uploaded data to the given file path. A
 * single request should not upload more than 150 MB of file contents.
 * @arg {Object} arg - The request parameters.
 * @arg {Object} arg.cursor - Contains the upload session ID and the offset.
 * @arg {Object} arg.commit - Contains the path and other optional modifiers for
 * the commit.
 * @returns {Object}
 */
routes.filesUploadSessionFinish = function (arg) {
    return self.request("files/upload_session/finish", arg, "upload");
}

/**
 * Upload sessions allow you to upload a single file using multiple requests.
 * This call starts a new upload session with the given data.  You can then use
 * upload_session/append to add more data and upload_session/finish to save all
 * the data to a file in Dropbox. A single request should not upload more than
 * 150 MB of file contents.
 * @arg {null} arg - The request parameters.
 * @returns {Object}
 */
routes.filesUploadSessionStart = function (arg) {
    return self.request("files/upload_session/start", arg, "upload");
}

/**
 * Allows an owner or editor (if the ACL update policy allows) of a shared
 * folder to add another member. For the new member to get access to all the
 * functionality for this folder, you will need to call mount_folder on their
 * behalf. Apps must have full Dropbox access to use this endpoint. Warning:
 * This endpoint is in beta and is subject to minor but possibly
 * backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Array} arg.members - The intended list of members to add.  Added
 * members will receive invites to join the shared folder.
 * @arg {Boolean} arg.quiet - Whether added members should be notified via email
 * and device notifications of their invite.
 * @arg {String|null} arg.custom_message - Optional message to display to added
 * members in their invitation.
 * @returns {null}
 */
routes.sharingAddFolderMember = function (arg) {
    return self.request("sharing/add_folder_member", arg, null);
}

/**
 * Returns the status of an asynchronous job. Apps must have full Dropbox access
 * to use this endpoint. Warning: This endpoint is in beta and is subject to
 * minor but possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.async_job_id - Id of the asynchronous job. This is the
 * value of a response returned from the method that launched the job.
 * @returns {Object}
 */
routes.sharingCheckJobStatus = function (arg) {
    return self.request("sharing/check_job_status", arg, null);
}

/**
 * Returns the status of an asynchronous job for sharing a folder. Apps must
 * have full Dropbox access to use this endpoint. Warning: This endpoint is in
 * beta and is subject to minor but possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.async_job_id - Id of the asynchronous job. This is the
 * value of a response returned from the method that launched the job.
 * @returns {Object}
 */
routes.sharingCheckShareJobStatus = function (arg) {
    return self.request("sharing/check_share_job_status", arg, null);
}

/**
 * Create a shared link. If a shared link already exists for the given path,
 * that link is returned. Note that in the returned PathLinkMetadata, the
 * PathLinkMetadata.url field is the shortened URL if
 * CreateSharedLinkArg.short_url argument is set to true. Previously, it was
 * technically possible to break a shared link by moving or renaming the
 * corresponding file or folder. In the future, this will no longer be the case,
 * so your app shouldn't rely on this behavior. Instead, if your app needs to
 * revoke a shared link, use revoke_shared_link.
 * @deprecated
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to share.
 * @arg {Boolean} arg.short_url - Whether to return a shortened URL.
 * @arg {Object|null} arg.pending_upload - If it's okay to share a path that
 * does not yet exist, set this to either PendingUploadMode.file or
 * PendingUploadMode.folder to indicate whether to assume it's a file or folder.
 * @returns {Object}
 */
routes.sharingCreateSharedLink = function (arg) {
    return self.request("sharing/create_shared_link", arg, null);
}

/**
 * Create a shared link with custom settings. If no settings are given then the
 * default visibility is RequestedVisibility.public (The resolved visibility,
 * though, may depend on other aspects such as team and shared folder settings).
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to be shared by the shared link
 * @arg {Object|null} arg.settings - The requested settings for the newly
 * created shared link
 * @returns {Object}
 */
routes.sharingCreateSharedLinkWithSettings = function (arg) {
    return self.request("sharing/create_shared_link_with_settings", arg, null);
}

/**
 * Returns shared folder metadata by its folder ID. Apps must have full Dropbox
 * access to use this endpoint. Warning: This endpoint is in beta and is subject
 * to minor but possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Array|null} arg.actions - Folder actions to query.
 * @returns {Object}
 */
routes.sharingGetFolderMetadata = function (arg) {
    return self.request("sharing/get_folder_metadata", arg, null);
}

/**
 * Download the shared link's file from a user's Dropbox.
 * @arg {Object} arg - The request parameters.
 * @returns {Object}
 */
routes.sharingGetSharedLinkFile = function (arg) {
    return self.request("sharing/get_shared_link_file", arg, "download");
}

/**
 * Get the shared link's metadata.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.url - URL of the shared link.
 * @arg {String|null} arg.path - If the shared link is to a folder, this
 * parameter can be used to retrieve the metadata for a specific file or
 * sub-folder in this folder. A relative path should be used.
 * @arg {String|null} arg.link_password - If the shared link has a password,
 * this parameter can be used.
 * @returns {Object}
 */
routes.sharingGetSharedLinkMetadata = function (arg) {
    return self.request("sharing/get_shared_link_metadata", arg, null);
}

/**
 * Returns a list of LinkMetadata objects for this user, including collection
 * links. If no path is given or the path is empty, returns a list of all shared
 * links for the current user, including collection links. If a non-empty path
 * is given, returns a list of all shared links that allow access to the given
 * path.  Collection links are never returned in this case. Note that the url
 * field in the response is never the shortened URL.
 * @deprecated
 * @arg {Object} arg - The request parameters.
 * @arg {String|null} arg.path - See get_shared_links description.
 * @returns {Object}
 */
routes.sharingGetSharedLinks = function (arg) {
    return self.request("sharing/get_shared_links", arg, null);
}

/**
 * Returns shared folder membership by its folder ID. Apps must have full
 * Dropbox access to use this endpoint. Warning: This endpoint is in beta and is
 * subject to minor but possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Array|null} arg.actions - Member actions to query.
 * @arg {Number} arg.limit - The maximum number of results that include members,
 * groups and invitees to return per request.
 * @returns {Object}
 */
routes.sharingListFolderMembers = function (arg) {
    return self.request("sharing/list_folder_members", arg, null);
}

/**
 * Once a cursor has been retrieved from list_folder_members, use this to
 * paginate through all shared folder members. Apps must have full Dropbox
 * access to use this endpoint. Warning: This endpoint is in beta and is subject
 * to minor but possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - The cursor returned by your last call to
 * list_folder_members or list_folder_members/continue.
 * @returns {Object}
 */
routes.sharingListFolderMembersContinue = function (arg) {
    return self.request("sharing/list_folder_members/continue", arg, null);
}

/**
 * Return the list of all shared folders the current user has access to. Apps
 * must have full Dropbox access to use this endpoint. Warning: This endpoint is
 * in beta and is subject to minor but possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {Number} arg.limit - The maximum number of results to return per
 * request.
 * @arg {Array|null} arg.actions - Folder actions to query.
 * @returns {Object}
 */
routes.sharingListFolders = function (arg) {
    return self.request("sharing/list_folders", arg, null);
}

/**
 * Once a cursor has been retrieved from list_folders, use this to paginate
 * through all shared folders. The cursor must come from a previous call to
 * list_folders or list_folders/continue. Apps must have full Dropbox access to
 * use this endpoint. Warning: This endpoint is in beta and is subject to minor
 * but possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - The cursor returned by the previous API call
 * specified in the endpoint description.
 * @returns {Object}
 */
routes.sharingListFoldersContinue = function (arg) {
    return self.request("sharing/list_folders/continue", arg, null);
}

/**
 * Return the list of all shared folders the current user can mount or unmount.
 * Apps must have full Dropbox access to use this endpoint.
 * @arg {Object} arg - The request parameters.
 * @arg {Number} arg.limit - The maximum number of results to return per
 * request.
 * @arg {Array|null} arg.actions - Folder actions to query.
 * @returns {Object}
 */
routes.sharingListMountableFolders = function (arg) {
    return self.request("sharing/list_mountable_folders", arg, null);
}

/**
 * Once a cursor has been retrieved from list_mountable_folders, use this to
 * paginate through all mountable shared folders. The cursor must come from a
 * previous call to list_mountable_folders or list_mountable_folders/continue.
 * Apps must have full Dropbox access to use this endpoint.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - The cursor returned by the previous API call
 * specified in the endpoint description.
 * @returns {Object}
 */
routes.sharingListMountableFoldersContinue = function (arg) {
    return self.request("sharing/list_mountable_folders/continue", arg, null);
}

/**
 * List shared links of this user. If no path is given or the path is empty,
 * returns a list of all shared links for the current user. If a non-empty path
 * is given, returns a list of all shared links that allow access to the given
 * path - direct links to the given path and links to parent folders of the
 * given path. Links to parent folders can be suppressed by setting direct_only
 * to true.
 * @arg {Object} arg - The request parameters.
 * @arg {String|null} arg.path - See list_shared_links description.
 * @arg {String|null} arg.cursor - The cursor returned by your last call to
 * list_shared_links.
 * @arg {Boolean|null} arg.direct_only - See list_shared_links description.
 * @returns {Object}
 */
routes.sharingListSharedLinks = function (arg) {
    return self.request("sharing/list_shared_links", arg, null);
}

/**
 * Modify the shared link's settings. If the requested visibility conflict with
 * the shared links policy of the team or the shared folder (in case the linked
 * file is part of a shared folder) then the LinkPermissions.resolved_visibility
 * of the returned SharedLinkMetadata will reflect the actual visibility of the
 * shared link and the LinkPermissions.requested_visibility will reflect the
 * requested visibility.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.url - URL of the shared link to change its settings
 * @arg {Object} arg.settings - Set of settings for the shared link.
 * @returns {Object}
 */
routes.sharingModifySharedLinkSettings = function (arg) {
    return self.request("sharing/modify_shared_link_settings", arg, null);
}

/**
 * The current user mounts the designated folder. Mount a shared folder for a
 * user after they have been added as a member. Once mounted, the shared folder
 * will appear in their Dropbox. Apps must have full Dropbox access to use this
 * endpoint. Warning: This endpoint is in beta and is subject to minor but
 * possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID of the shared folder to mount.
 * @returns {Object}
 */
routes.sharingMountFolder = function (arg) {
    return self.request("sharing/mount_folder", arg, null);
}

/**
 * The current user relinquishes their membership in the designated shared
 * folder and will no longer have access to the folder.  A folder owner cannot
 * relinquish membership in their own folder. Apps must have full Dropbox access
 * to use this endpoint. Warning: This endpoint is in beta and is subject to
 * minor but possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @returns {null}
 */
routes.sharingRelinquishFolderMembership = function (arg) {
    return self.request("sharing/relinquish_folder_membership", arg, null);
}

/**
 * Allows an owner or editor (if the ACL update policy allows) of a shared
 * folder to remove another member. Apps must have full Dropbox access to use
 * this endpoint. Warning: This endpoint is in beta and is subject to minor but
 * possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Object} arg.member - The member to remove from the folder.
 * @arg {Boolean} arg.leave_a_copy - If true, the removed user will keep their
 * copy of the folder after it's unshared, assuming it was mounted. Otherwise,
 * it will be removed from their Dropbox. Also, this must be set to false when
 * kicking a group.
 * @returns {Object}
 */
routes.sharingRemoveFolderMember = function (arg) {
    return self.request("sharing/remove_folder_member", arg, null);
}

/**
 * Revoke a shared link. Note that even after revoking a shared link to a file,
 * the file may be accessible if there are shared links leading to any of the
 * file parent folders. To list all shared links that enable access to a
 * specific file, you can use the list_shared_links with the file as the
 * ListSharedLinksArg.path argument.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.url - URL of the shared link.
 * @returns {null}
 */
routes.sharingRevokeSharedLink = function (arg) {
    return self.request("sharing/revoke_shared_link", arg, null);
}

/**
 * Share a folder with collaborators. Most sharing will be completed
 * synchronously. Large folders will be completed asynchronously. To make
 * testing the async case repeatable, set `ShareFolderArg.force_async`. If a
 * ShareFolderLaunch.async_job_id is returned, you'll need to call
 * check_share_job_status until the action completes to get the metadata for the
 * folder. Apps must have full Dropbox access to use this endpoint. Warning:
 * This endpoint is in beta and is subject to minor but possibly
 * backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the folder to share. If it does not
 * exist, then a new one is created.
 * @arg {Object} arg.member_policy - Who can be a member of this shared folder.
 * Only applicable if the current user is on a team.
 * @arg {Object} arg.acl_update_policy - Who can add and remove members of this
 * shared folder.
 * @arg {Object} arg.shared_link_policy - The policy to apply to shared links
 * created for content inside this shared folder.  The current user must be on a
 * team to set this policy to SharedLinkPolicy.members.
 * @arg {Boolean} arg.force_async - Whether to force the share to happen
 * asynchronously.
 * @returns {Object}
 */
routes.sharingShareFolder = function (arg) {
    return self.request("sharing/share_folder", arg, null);
}

/**
 * Transfer ownership of a shared folder to a member of the shared folder. User
 * must have AccessLevel.owner access to the shared folder to perform a
 * transfer. Apps must have full Dropbox access to use this endpoint. Warning:
 * This endpoint is in beta and is subject to minor but possibly
 * backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {String} arg.to_dropbox_id - A account or team member ID to transfer
 * ownership to.
 * @returns {null}
 */
routes.sharingTransferFolder = function (arg) {
    return self.request("sharing/transfer_folder", arg, null);
}

/**
 * The current user unmounts the designated folder. They can re-mount the folder
 * at a later time using mount_folder. Apps must have full Dropbox access to use
 * this endpoint. Warning: This endpoint is in beta and is subject to minor but
 * possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @returns {null}
 */
routes.sharingUnmountFolder = function (arg) {
    return self.request("sharing/unmount_folder", arg, null);
}

/**
 * Allows a shared folder owner to unshare the folder. You'll need to call
 * check_job_status to determine if the action has completed successfully. Apps
 * must have full Dropbox access to use this endpoint. Warning: This endpoint is
 * in beta and is subject to minor but possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Boolean} arg.leave_a_copy - If true, members of this shared folder will
 * get a copy of this folder after it's unshared. Otherwise, it will be removed
 * from their Dropbox. The current user, who is an owner, will always retain
 * their copy.
 * @returns {Object}
 */
routes.sharingUnshareFolder = function (arg) {
    return self.request("sharing/unshare_folder", arg, null);
}

/**
 * Allows an owner or editor of a shared folder to update another member's
 * permissions. Apps must have full Dropbox access to use this endpoint.
 * Warning: This endpoint is in beta and is subject to minor but possibly
 * backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Object} arg.member - The member of the shared folder to update.  Only
 * the MemberSelector.dropbox_id may be set at this time.
 * @arg {Object} arg.access_level - The new access level for member.
 * AccessLevel.owner is disallowed.
 * @returns {null}
 */
routes.sharingUpdateFolderMember = function (arg) {
    return self.request("sharing/update_folder_member", arg, null);
}

/**
 * Update the sharing policies for a shared folder. User must have
 * AccessLevel.owner access to the shared folder to update its policies. Apps
 * must have full Dropbox access to use this endpoint. Warning: This endpoint is
 * in beta and is subject to minor but possibly backwards-incompatible changes.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Object|null} arg.member_policy - Who can be a member of this shared
 * folder. Only applicable if the current user is on a team.
 * @arg {Object|null} arg.acl_update_policy - Who can add and remove members of
 * this shared folder.
 * @arg {Object|null} arg.shared_link_policy - The policy to apply to shared
 * links created for content inside this shared folder. The current user must be
 * on a team to set this policy to SharedLinkPolicy.members.
 * @returns {Object}
 */
routes.sharingUpdateFolderPolicy = function (arg) {
    return self.request("sharing/update_folder_policy", arg, null);
}

/**
 * List all device sessions of a team's member.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.team_member_id - The team's member id
 * @arg {Boolean} arg.include_web_sessions - Whether to list web sessions of the
 * team's member
 * @arg {Boolean} arg.include_desktop_clients - Whether to list linked desktop
 * devices of the team's member
 * @arg {Boolean} arg.include_mobile_clients - Whether to list linked mobile
 * devices of the team's member
 * @returns {Object}
 */
routes.teamDevicesListMemberDevices = function (arg) {
    return self.request("team/devices/list_member_devices", arg, null);
}

/**
 * List all device sessions of a team.
 * @arg {Object} arg - The request parameters.
 * @arg {String|null} arg.cursor - At the first call to the
 * devices/list_team_devices the cursor shouldn't be passed. Then, if the result
 * of the call includes a cursor, the following requests should include the
 * received cursors in order to receive the next sub list of team devices
 * @arg {Boolean} arg.include_web_sessions - Whether to list web sessions of the
 * team members
 * @arg {Boolean} arg.include_desktop_clients - Whether to list desktop clients
 * of the team members
 * @arg {Boolean} arg.include_mobile_clients - Whether to list mobile clients of
 * the team members
 * @returns {Object}
 */
routes.teamDevicesListTeamDevices = function (arg) {
    return self.request("team/devices/list_team_devices", arg, null);
}

/**
 * Revoke a device session of a team's member
 * @arg {Object} arg - The request parameters.
 * @arg {Object} arg.web_session - End an active session
 * @arg {Object} arg.desktop_client - Unlink a linked desktop device
 * @arg {Object} arg.mobile_client - Unlink a linked mobile device
 * @returns {null}
 */
routes.teamDevicesRevokeDeviceSession = function (arg) {
    return self.request("team/devices/revoke_device_session", arg, null);
}

/**
 * Revoke a list of device sessions of team members
 * @arg {Object} arg - The request parameters.
 * @arg {Array} arg.revoke_devices
 * @returns {Object}
 */
routes.teamDevicesRevokeDeviceSessionBatch = function (arg) {
    return self.request("team/devices/revoke_device_session_batch", arg, null);
}

/**
 * Retrieves information about a team.
 * @arg {null} arg - The request parameters.
 * @returns {Object}
 */
routes.teamGetInfo = function (arg) {
    return self.request("team/get_info", arg, null);
}

/**
 * Creates a new, empty group, with a requested name. Permission : Team member
 * management
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.group_name - Group name.
 * @arg {String|null} arg.group_external_id - Optional argument. The creator of
 * a team can associate an arbitrary external ID to the group.
 * @returns {Object}
 */
routes.teamGroupsCreate = function (arg) {
    return self.request("team/groups/create", arg, null);
}

/**
 * Deletes a group. The group is deleted immediately. However the revoking of
 * group-owned resources may take additional time. Use the groups/job_status/get
 * to determine whether this process has completed. Permission : Team member
 * management
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.group_id - Group ID.
 * @arg {String} arg.group_external_id - External ID of the group.
 * @returns {Object}
 */
routes.teamGroupsDelete = function (arg) {
    return self.request("team/groups/delete", arg, null);
}

/**
 * Retrieves information about one or more groups. Permission : Team Information
 * @arg {Object} arg - The request parameters.
 * @arg {Array} arg.group_ids - List of group IDs.
 * @arg {Array} arg.group_external_ids - List of external IDs of groups.
 * @returns {Object}
 */
routes.teamGroupsGetInfo = function (arg) {
    return self.request("team/groups/get_info", arg, null);
}

/**
 * Once an async_job_id is returned from groups/delete, groups/members/add , or
 * groups/members/remove use this method to poll the status of granting/revoking
 * group members' access to group-owned resources. Permission : Team member
 * management
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.async_job_id - Id of the asynchronous job. This is the
 * value of a response returned from the method that launched the job.
 * @returns {Object}
 */
routes.teamGroupsJobStatusGet = function (arg) {
    return self.request("team/groups/job_status/get", arg, null);
}

/**
 * Lists groups on a team. Permission : Team Information
 * @arg {Object} arg - The request parameters.
 * @arg {Number} arg.limit - Number of results to return per call.
 * @returns {Object}
 */
routes.teamGroupsList = function (arg) {
    return self.request("team/groups/list", arg, null);
}

/**
 * Once a cursor has been retrieved from groups/list, use this to paginate
 * through all groups. Permission : Team information
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - Indicates from what point to get the next set of
 * groups.
 * @returns {Object}
 */
routes.teamGroupsListContinue = function (arg) {
    return self.request("team/groups/list/continue", arg, null);
}

/**
 * Adds members to a group. The members are added immediately. However the
 * granting of group-owned resources may take additional time. Use the
 * groups/job_status/get to determine whether this process has completed.
 * Permission : Team member management
 * @arg {Object} arg - The request parameters.
 * @arg {Object} arg.group - Group to which users will be added.
 * @arg {Array} arg.members - List of users to be added to the group.
 * @returns {Object}
 */
routes.teamGroupsMembersAdd = function (arg) {
    return self.request("team/groups/members/add", arg, null);
}

/**
 * Removes members from a group. The members are removed immediately. However
 * the revoking of group-owned resources may take additional time. Use the
 * groups/job_status/get to determine whether this process has completed.
 * Permission : Team member management
 * @arg {Object} arg - The request parameters.
 * @arg {Object} arg.group
 * @arg {Array} arg.users
 * @returns {Object}
 */
routes.teamGroupsMembersRemove = function (arg) {
    return self.request("team/groups/members/remove", arg, null);
}

/**
 * Sets a member's access type in a group. Permission : Team member management
 * @arg {Object} arg - The request parameters.
 * @arg {Object} arg.group - Specify a group.
 * @arg {Object} arg.user - Identity of a user that is a member of group.
 * @arg {Object} arg.access_type - New group access type the user will have.
 * @returns {Object}
 */
routes.teamGroupsMembersSetAccessType = function (arg) {
    return self.request("team/groups/members/set_access_type", arg, null);
}

/**
 * Updates a group's name and/or external ID. Permission : Team member
 * management
 * @arg {Object} arg - The request parameters.
 * @arg {Object} arg.group - Specify a group.
 * @arg {String|null} arg.new_group_name - Optional argument. Set group name to
 * this if provided.
 * @arg {String|null} arg.new_group_external_id - Optional argument. New group
 * external ID. If the argument is None, the group's external_id won't be
 * updated. If the argument is empty string, the group's external id will be
 * cleared.
 * @returns {Object}
 */
routes.teamGroupsUpdate = function (arg) {
    return self.request("team/groups/update", arg, null);
}

/**
 * List all linked applications of the team member. Note, this endpoint doesn't
 * list any team-linked applications.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.team_member_id - The team member id
 * @returns {Object}
 */
routes.teamLinkedAppsListMemberLinkedApps = function (arg) {
    return self.request("team/linked_apps/list_member_linked_apps", arg, null);
}

/**
 * List all applications linked to the team members' accounts. Note, this
 * endpoint doesn't list any team-linked applications.
 * @arg {Object} arg - The request parameters.
 * @arg {String|null} arg.cursor - At the first call to the
 * linked_apps/list_team_linked_apps the cursor shouldn't be passed. Then, if
 * the result of the call includes a cursor, the following requests should
 * include the received cursors in order to receive the next sub list of the
 * team applications
 * @returns {Object}
 */
routes.teamLinkedAppsListTeamLinkedApps = function (arg) {
    return self.request("team/linked_apps/list_team_linked_apps", arg, null);
}

/**
 * Revoke a linked application of the team member
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.app_id - The application's unique id
 * @arg {String} arg.team_member_id - The unique id of the member owning the
 * device
 * @arg {Boolean} arg.keep_app_folder - Whether to keep the application
 * dedicated folder (in case the application uses  one)
 * @returns {null}
 */
routes.teamLinkedAppsRevokeLinkedApp = function (arg) {
    return self.request("team/linked_apps/revoke_linked_app", arg, null);
}

/**
 * Revoke a list of linked applications of the team members
 * @arg {Object} arg - The request parameters.
 * @arg {Array} arg.revoke_linked_app
 * @returns {Object}
 */
routes.teamLinkedAppsRevokeLinkedAppBatch = function (arg) {
    return self.request("team/linked_apps/revoke_linked_app_batch", arg, null);
}

/**
 * Adds members to a team. Permission : Team member management A maximum of 20
 * members can be specified in a single call. If no Dropbox account exists with
 * the email address specified, a new Dropbox account will be created with the
 * given email address, and that account will be invited to the team. If a
 * personal Dropbox account exists with the email address specified in the call,
 * this call will create a placeholder Dropbox account for the user on the team
 * and send an email inviting the user to migrate their existing personal
 * account onto the team. Team member management apps are required to set an
 * initial given_name and surname for a user to use in the team invitation and
 * for 'Perform as team member' actions taken on the user before they become
 * 'active'.
 * @arg {Object} arg - The request parameters.
 * @arg {Array} arg.new_members - Details of new members to be added to the
 * team.
 * @arg {Boolean} arg.force_async - Whether to force the add to happen
 * asynchronously.
 * @returns {Object}
 */
routes.teamMembersAdd = function (arg) {
    return self.request("team/members/add", arg, null);
}

/**
 * Once an async_job_id is returned from members/add , use this to poll the
 * status of the asynchronous request. Permission : Team member management
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.async_job_id - Id of the asynchronous job. This is the
 * value of a response returned from the method that launched the job.
 * @returns {Object}
 */
routes.teamMembersAddJobStatusGet = function (arg) {
    return self.request("team/members/add/job_status/get", arg, null);
}

/**
 * Returns information about multiple team members. Permission : Team
 * information This endpoint will return an empty member_info item, for IDs (or
 * emails) that cannot be matched to a valid team member.
 * @arg {Object} arg - The request parameters.
 * @arg {Array} arg.members - List of team members.
 * @returns {Object}
 */
routes.teamMembersGetInfo = function (arg) {
    return self.request("team/members/get_info", arg, null);
}

/**
 * Lists members of a team. Permission : Team information
 * @arg {Object} arg - The request parameters.
 * @arg {Number} arg.limit - Number of results to return per call.
 * @returns {Object}
 */
routes.teamMembersList = function (arg) {
    return self.request("team/members/list", arg, null);
}

/**
 * Once a cursor has been retrieved from members/list, use this to paginate
 * through all team members. Permission : Team information
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - Indicates from what point to get the next set of
 * members.
 * @returns {Object}
 */
routes.teamMembersListContinue = function (arg) {
    return self.request("team/members/list/continue", arg, null);
}

/**
 * Removes a member from a team. Permission : Team member management Exactly one
 * of team_member_id, email, or external_id must be provided to identify the
 * user account. This is not a deactivation where the account can be
 * re-activated again. Calling members/add with the removed user's email address
 * will create a new account with a new team_member_id that will not have access
 * to any content that was shared with the initial account. This endpoint may
 * initiate an asynchronous job. To obtain the final result of the job, the
 * client should periodically poll members/remove/job_status/get.
 * @arg {Object} arg - The request parameters.
 * @arg {Object} arg.user - Identity of user to remove/suspend.
 * @arg {Boolean} arg.wipe_data - If provided, controls if the user's data will
 * be deleted on their linked devices.
 * @arg {Object|null} arg.transfer_dest_id - If provided, files from the deleted
 * member account will be transferred to this user.
 * @arg {Object|null} arg.transfer_admin_id - If provided, errors during the
 * transfer process will be sent via email to this user. If the transfer_dest_id
 * argument was provided, then this argument must be provided as well.
 * @returns {Object}
 */
routes.teamMembersRemove = function (arg) {
    return self.request("team/members/remove", arg, null);
}

/**
 * Once an async_job_id is returned from members/remove , use this to poll the
 * status of the asynchronous request. Permission : Team member management
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.async_job_id - Id of the asynchronous job. This is the
 * value of a response returned from the method that launched the job.
 * @returns {Object}
 */
routes.teamMembersRemoveJobStatusGet = function (arg) {
    return self.request("team/members/remove/job_status/get", arg, null);
}

/**
 * Sends welcome email to pending team member. Permission : Team member
 * management Exactly one of team_member_id, email, or external_id must be
 * provided to identify the user account. No-op if team member is not pending.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.team_member_id
 * @arg {String} arg.external_id
 * @arg {String} arg.email
 * @returns {null}
 */
routes.teamMembersSendWelcomeEmail = function (arg) {
    return self.request("team/members/send_welcome_email", arg, null);
}

/**
 * Updates a team member's permissions. Permission : Team member management
 * @arg {Object} arg - The request parameters.
 * @arg {Object} arg.user - Identity of user whose role will be set.
 * @arg {Object} arg.new_role - The new role of the member.
 * @returns {Object}
 */
routes.teamMembersSetAdminPermissions = function (arg) {
    return self.request("team/members/set_admin_permissions", arg, null);
}

/**
 * Updates a team member's profile. Permission : Team member management
 * @arg {Object} arg - The request parameters.
 * @arg {Object} arg.user - Identity of user whose profile will be set.
 * @arg {String|null} arg.new_email - New email for member.
 * @arg {String|null} arg.new_external_id - New external ID for member.
 * @arg {String|null} arg.new_given_name - New given name for member.
 * @arg {String|null} arg.new_surname - New surname for member.
 * @returns {Object}
 */
routes.teamMembersSetProfile = function (arg) {
    return self.request("team/members/set_profile", arg, null);
}

/**
 * Suspend a member from a team. Permission : Team member management Exactly one
 * of team_member_id, email, or external_id must be provided to identify the
 * user account.
 * @arg {Object} arg - The request parameters.
 * @arg {Object} arg.user - Identity of user to remove/suspend.
 * @arg {Boolean} arg.wipe_data - If provided, controls if the user's data will
 * be deleted on their linked devices.
 * @returns {null}
 */
routes.teamMembersSuspend = function (arg) {
    return self.request("team/members/suspend", arg, null);
}

/**
 * Unsuspend a member from a team. Permission : Team member management Exactly
 * one of team_member_id, email, or external_id must be provided to identify the
 * user account.
 * @arg {Object} arg - The request parameters.
 * @arg {Object} arg.user - Identity of user to unsuspend.
 * @returns {null}
 */
routes.teamMembersUnsuspend = function (arg) {
    return self.request("team/members/unsuspend", arg, null);
}

/**
 * Retrieves reporting data about a team's user activity.
 * @arg {Object} arg - The request parameters.
 * @arg {Object|null} arg.start_date - Optional starting date (inclusive)
 * @arg {Object|null} arg.end_date - Optional ending date (exclusive)
 * @returns {Object}
 */
routes.teamReportsGetActivity = function (arg) {
    return self.request("team/reports/get_activity", arg, null);
}

/**
 * Retrieves reporting data about a team's linked devices.
 * @arg {Object} arg - The request parameters.
 * @arg {Object|null} arg.start_date - Optional starting date (inclusive)
 * @arg {Object|null} arg.end_date - Optional ending date (exclusive)
 * @returns {Object}
 */
routes.teamReportsGetDevices = function (arg) {
    return self.request("team/reports/get_devices", arg, null);
}

/**
 * Retrieves reporting data about a team's membership.
 * @arg {Object} arg - The request parameters.
 * @arg {Object|null} arg.start_date - Optional starting date (inclusive)
 * @arg {Object|null} arg.end_date - Optional ending date (exclusive)
 * @returns {Object}
 */
routes.teamReportsGetMembership = function (arg) {
    return self.request("team/reports/get_membership", arg, null);
}

/**
 * Retrieves reporting data about a team's storage usage.
 * @arg {Object} arg - The request parameters.
 * @arg {Object|null} arg.start_date - Optional starting date (inclusive)
 * @arg {Object|null} arg.end_date - Optional ending date (exclusive)
 * @returns {Object}
 */
routes.teamReportsGetStorage = function (arg) {
    return self.request("team/reports/get_storage", arg, null);
}

/**
 * Get information about a user's account.
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.account_id - A user's account identifier.
 * @returns {Object}
 */
routes.usersGetAccount = function (arg) {
    return self.request("users/get_account", arg, null);
}

/**
 * Get information about multiple user accounts.  At most 300 accounts may be
 * queried per request.
 * @arg {Object} arg - The request parameters.
 * @arg {Array} arg.account_ids - List of user account identifiers.  Should not
 * contain any duplicate account IDs.
 * @returns {Object}
 */
routes.usersGetAccountBatch = function (arg) {
    return self.request("users/get_account_batch", arg, null);
}

/**
 * Get information about the current user's account.
 * @arg {null} arg - The request parameters.
 * @returns {Object}
 */
routes.usersGetCurrentAccount = function (arg) {
    return self.request("users/get_current_account", arg, null);
}

/**
 * Get the space usage information for the current user's account.
 * @arg {null} arg - The request parameters.
 * @returns {Object}
 */
routes.usersGetSpaceUsage = function (arg) {
    return self.request("users/get_space_usage", arg, null);
}

module.exports = routes
